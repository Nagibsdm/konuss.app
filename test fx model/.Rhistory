# Muestra las primeras filas de tu conjunto de datos
head(forecasted_volatility)
# Verifica si la columna 'fecha' tiene datos
summary(forecasted_volatility$fecha)
# Instalar y cargar la biblioteca writexl si no lo has hecho
# install.packages("writexl")
library(writexl)
install.packages("writexl")
# Instalar y cargar la biblioteca writexl si no lo has hecho
# install.packages("writexl")
library(writexl)
# Supongamos que 'forecasted_data' contiene tu pronóstico
# Asegurémonos de que 'Fecha' sea de tipo Date si no lo es
forecasted_data$Fecha <- as.Date(forecasted_data$Fecha)
# Supongamos que 'forecasted_data' contiene tu pronóstico
# Asegurémonos de que 'Fecha' sea de tipo Date si no lo es
forecasted_volatility$Fecha <- as.Date(forecasted_data$Fecha)
# Supongamos que 'forecasted_data' contiene tu pronóstico
# Asegurémonos de que 'Fecha' sea de tipo Date si no lo es
forecasted_volatility$Fecha <- as.Date(forecasted_volatility$Fecha)
# Crear un nuevo conjunto de datos solo con las columnas necesarias para el pronóstico
forecasted_volatility <- data.frame(Fecha = forecasted_volatility$Fecha, Pronostico = forecasted_volatility$`1973-06-11`)
# Escribir el pronóstico en un archivo Excel
write_xlsx(forecast_data, path = "pronostico.xlsx")
# Escribir el pronóstico en un archivo Excel
write_xlsx(forecasted_volatility, path = "pronostico.xlsx")
# Verificar el directorio de trabajo actual
getwd()
# Cambiar el directorio de trabajo si es necesario
setwd("/Users/nagibsouki/Desktop/test fx model")
forecast_data <- data.frame(Fecha = forecasted_volatility$fecha, Pronostico = forecasted_volatility$'1973-06-11')
print(forecast_data)
# Instalar y cargar las bibliotecas necesarias
# install.packages("rugarch")
# install.packages("writexl")
# install.packages("ggplot2")
library(rugarch)
library(writexl)
library(ggplot2)
# Supongamos que 'vix_data' contiene tus datos actuales del VIX
# Asegurémonos de que 'Fecha' sea de tipo Date si no lo es
vix_data$Fecha <- as.Date(vix_data$Fecha)
## Instalar y cargar las bibliotecas necesarias
# install.packages("rugarch")
# install.packages("writexl")
# install.packages("ggplot2")
library(rugarch)
library(writexl)
library(ggplot2)
# Importar datos actuales del VIX desde un archivo CSV
vix_data <- read.csv("/Users/nagibsouki/Documents/^VIX-2.csv")  # Ajusta el nombre del archivo
# Asegurémonos de que 'Fecha' sea de tipo Date si no lo es
vix_data$Date <- as.Date(vix_data$Date)
# Crear un objeto de modelo GARCH (ajústalo según tu modelo real)
spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(1, 0)))
# Ajustar el modelo a tus datos (reemplaza 'Close' con tu columna de precios de cierre)
fit <- ugarchfit(spec, data = vix_data$Close)
# Ajustar el modelo a tus datos (reemplaza 'Close' con tu columna de precios de cierre)
vix_data <- na.omit(vix_data)
fit <- ugarchfit(spec, data = vix_data$Close)
spec_simple <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)))
fit_simple <- try(ugarchfit(spec_simple, data = vix_data$Close), silent = TRUE)
if (inherits(fit_simple, "try-error")) {
# Si aún hay problemas, intenta con un modelo más simple
spec_simple <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 0)))
fit_simple <- ugarchfit(spec_simple, data = vix_data$Close)
}
# Si aún hay problemas, intenta con un modelo más simple
spec_simple <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 0)))
fit_simple <- ugarchfit(spec_simple, data = vix_data$Close)
spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(1, 0)),
solver = "hybrid",  # Cambiar el método de optimización
solver.control = list(maxit = 1000))  # Ajustar el número máximo de iteraciones
spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(1, 0)),
solver = "hybrid",  # Cambiar el método de optimización
solver.control = list(maxit = 1000))  # Ajustar el número máximo de iteraciones
library(rugarch)
library(writexl)
library(ggplot2)
# Carga los datos desde el archivo CSV
vix_data <- read.csv("/Users/nagibsouki/Documents/^VIX-2.csv")
# Asegurémonos de que 'Fecha' sea de tipo Date
vix_data$Date <- as.Date(vix_data$Date)
# Verifica las primeras filas de tus datos
head(vix_data)
# Visualiza la serie temporal
plot(vix_data$Fecha, vix_data$Close, type = "l", col = "blue", xlab = "Fecha", ylab = "Precio de Cierre")
# Crea un objeto de especificación del modelo GARCH
spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(1, 0)))
# Ajusta el modelo GARCH a tus datos
fit <- ugarchfit(spec, data = vix_data$Close)
# Muestra un resumen del ajuste del modelo
summary(fit)
# Verifica las longitudes de 'Fecha' y 'Close'
length(vix_data$Fecha)
length(vix_data$Close)
# Visualiza la serie temporal
plot(vix_data$Date, vix_data$Close, type = "l", col = "blue", xlab = "Fecha", ylab = "Precio de Cierre")
vix_data <- vix_data[complete.cases(vix_data$Date, vix_data$Close), ]
# Visualiza la serie temporal
plot(vix_data$Date, vix_data$Close, type = "l", col = "blue", xlab = "Fecha", ylab = "Precio de Cierre")
# Crea un objeto de especificación del modelo GARCH
spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(1, 0)))
# Ajusta el modelo GARCH a tus datos
fit <- ugarchfit(spec, data = vix_data$Close)
# Asegúrate de que 'Date' sea de tipo Date y elimina filas con NA
vix_data$Date <- as.Date(vix_data$Date)
vix_data <- vix_data[complete.cases(vix_data$Date, vix_data$Close), ]
# Crea el gráfico
plot(vix_data$Date, vix_data$Close, type = "l", col = "blue", xlab = "Fecha", ylab = "Precio de Cierre")
# Asegúrate de que 'Date' sea de tipo Date y elimina filas con NA
vix_data$Date <- as.Date(vix_data$Date)
vix_data <- vix_data[complete.cases(vix_data$Date, vix_data$Close), ]
# Crea el gráfico
plot(vix_data$Date, vix_data$Close, type = "l", col = "blue", xlab = "Fecha", ylab = "Precio de Cierre")
# Asegúrate de que 'Date' sea de tipo Date y elimina filas con NA
vix_data$Date <- as.Date(vix_data$Date, format = "%Y-%m-%d")
vix_data <- vix_data[complete.cases(vix_data$Date, vix_data$Close), ]
# Crea el gráfico
plot(vix_data$Date, vix_data$Close, type = "l", col = "blue", xlab = "Fecha", ylab = "Precio de Cierre")
# Carga los datos desde el archivo CSV
vix_data <- read.csv("/Users/nagibsouki/Documents/^VIX-2.csv")
# Asegúrate de que 'Date' sea de tipo Date y maneja los valores NA
vix_data <- vix_data %>%
mutate(Date = as.Date(Date, format = "%Y-%m-%d")) %>%
drop_na()
library(tidyverse)
library(writexl)
# Carga los datos desde el archivo CSV
vix_data <- read.csv("vix_data.csv")
# Asegúrate de que 'Date' sea de tipo Date y maneja los valores NA
vix_data <- vix_data %>%
mutate(Date = as.Date(Date, format = "%Y-%m-%d")) %>%
drop_na()
# Imprime algunas filas para verificar
head(vix_data)
# Crea el gráfico
plot(vix_data$Date, vix_data$Close, type = "l", col = "blue", xlab = "Fecha", ylab = "Precio de Cierre")
# Asegúrate de que 'Date' sea de tipo Date y maneja los valores NA
vix_data <- vix_data %>%
mutate(Date = as.Date(Date, format = "%Y-%m-%d")) %>%
drop_na()
# Imprime algunas filas para verificar
head(vix_data)
# Crea el gráfico
plot(vix_data$Date, vix_data$Close, type = "l", col = "blue", xlab = "Fecha", ylab = "Precio de Cierre")
# Exporta el conjunto de datos limpio a un nuevo archivo CSV
write_xlsx(vix_data, path = "vix_data_cleaned.xlsx")
library(rugarch)
# Ajusta un modelo GARCH a los datos
spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(1, 0)))
fit <- ugarchfit(spec, data = vix_data$Close)
# Asegúrate de que 'Date' sea de tipo Date y maneja los valores NA
vix_data <- vix_data %>%
mutate(Date = as.Date(Date, format = "%Y-%m-%d")) %>%
drop_na()
# Ajusta un modelo GARCH a los datos
spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(1, 0)))
# Asegúrate de que no haya NA en la columna de cierre
vix_data <- vix_data[complete.cases(vix_data$Close), ]
# Ajusta el modelo GARCH
fit <- ugarchfit(spec, data = vix_data$Close)
# Asegúrate de que no haya NA en la columna de cierre
vix_data <- vix_data[complete.cases(vix_data$Close),
# Ajusta el modelo GARCH
# Asegúrate de que no haya NA en la columna de cierre
vix_data <- vix_data[complete.cases(vix_data$Close)
# Ajusta el modelo GARCH
fit <- ugarchfit(spec, data = vix_data$Close)
fit <- ugarchfit(spec, data = vix_data$Close)
# Asegúrate de que 'Date' sea de tipo Date y maneja los valores NA
vix_data <- vix_data %>%
mutate(Date = as.Date(Date, format = "%Y-%m-%d"))
# Elimina las filas que contienen NAs en la columna 'Close'
vix_data <- vix_data[complete.cases(vix_data$Close), ]
fit <- ugarchfit(spec, data = vix_data$Close)
# Genera un pronóstico para los próximos 10 periodos
forecast_data <- ugarchforecast(fit, n.ahead = 10)
# Extrae las fechas y el pronóstico
forecast_data_df <- data.frame(Fecha = index(forecast_data), Pronostico = forecast_data@forecast$seriesFor)
library(tidyverse)
library(rugarch)
library(writexl)
# Carga los datos desde el archivo CSV
vix_data <- read.csv("/Users/nagibsouki/Documents/^VIX-2.csv")
# Asegúrate de que 'Date' sea de tipo Date y elimina los valores NA
vix_data <- vix_data %>%
mutate(Date = as.Date(Date, format = "%Y-%m-%d")) %>%
drop_na()
# Ajusta un modelo GARCH a los datos
spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(1, 0)))
fit <- ugarchfit(spec, data = vix_data$Close)
# Asegúrate de que 'Date' sea de tipo Date y elimina los valores NA
vix_data <- vix_data %>%
mutate(Date = as.Date(Date, format = "%Y-%m-%d")) %>%
drop_na()
# Ajusta un modelo GARCH a los datos
spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(1, 0)))
fit <- ugarchfit(spec, data = vix_data$Close)
# Carga los datos desde el archivo CSV
vix_data <- read.csv("/Users/nagibsouki/Documents/^VIX-2.csv")
mutate(Date = as.Date(Date, format = "%Y-%m-%d")) %>%
na.omit()
# Carga los datos desde el archivo CSV y elimina los valores NA
vix_data <- read.csv("vix_data.csv") %>%
mutate(Date = as.Date(Date, format = "%Y-%m-%d")) %>%
na.omit()
# Carga los datos desde el archivo CSV
vix_data <- read.csv("vix_data.csv")
# Instala y carga las bibliotecas necesarias
install.packages(c("tidyverse", "rugarch", "writexl"))
# Carga los datos desde el archivo CSV y elimina los valores NA
vix_data <- read.csv("/Users/nagibsouki/Documents/^VIX-2.csv") %>%
mutate(Date = as.Date(Date, format = "%Y-%m-%d")) %>%
na.omit()
# Ajusta un modelo GARCH a los datos
spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(1, 0)))
fit <- ugarchfit(spec, data = vix_data$Close)
# Carga los datos desde el archivo CSV y elimina los valores NA
vix_data <- read.csv("/Users/nagibsouki/Documents/^VIX-2.csv") %>%
mutate(Date = as.Date(Date, format = "%Y-%m-%d")) %>%
na.omit()
# Ajusta un modelo GARCH a los datos con ajustes para mejorar la convergencia
spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(1, 0)),
solver.control = list(trace = FALSE))
# Carga los datos desde el archivo CSV y elimina los valores NA
vix_data <- read.csv("/Users/nagibsouki/Documents/^VIX-2.csv") %>%
mutate(Date = as.Date(Date, format = "%Y-%m-%d")) %>%
na.omit()
# Ajusta un modelo GARCH a los datos con ajustes para mejorar la convergencia
spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(1, 0)))
# Control de optimización para mejorar la convergencia
control <- list(maxit = 1000, trace = FALSE)
fit <- tryCatch(
ugarchfit(spec, data = vix_data$Close, solver = "solnp", solver.control = control),
error = function(e) e
)
# Verifica si hubo algún error durante el ajuste
message("Error en el ajuste del modelo GARCH. Verifique los datos y ajustes del modelo.")
library(tidyverse)
library(rugarch)
library(writexl)
# Carga los datos desde el archivo CSV y elimina los valores NA
vix_data <- read.csv("/Users/nagibsouki/Documents/^VIX-2.csv") %>%
mutate(Date = as.Date(Date, format = "%Y-%m-%d"))
# Elimina todos los valores NA
vix_data <- na.omit(vix_data)
# Ajusta un modelo GARCH a los datos con ajustes adicionales
spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(1, 0)))
# Control de optimización para mejorar la convergencia
control <- list(maxit = 500, optim.method = "L-BFGS-B", solver.control = list(trace = FALSE))
# Ajusta el modelo y maneja las posibles advertencias
fit <- suppressWarnings(ugarchfit(spec, data = vix_data$Close, solver = "solnp", solver.control = control))
# Carga los datos desde el archivo CSV
vix_data <- read.csv("/Users/nagibsouki/Documents/^VIX-2.csv") %>%
mutate(Date = as.Date(Date, format = "%Y-%m-%d"))
# Elimina todos los valores NA
vix_data <- na.omit(vix_data)
# Verifica si hay valores faltantes después de la eliminación
if (any(is.na(vix_data$Close))) {
message("Aún hay valores faltantes en la columna 'Close'. Verifique sus datos.")
} else {
# Ajusta un modelo GARCH a los datos con ajustes adicionales
spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(1, 0)))
# Control de optimización para mejorar la convergencia
control <- list(maxit = 500, optim.method = "L-BFGS-B", solver.control = list(trace = FALSE))
# Ajusta el modelo y maneja las posibles advertencias
fit <- suppressWarnings(ugarchfit(spec, data = vix_data$Close, solver = "solnp", solver.control = control))
# Verifica si hubo algún error durante el ajuste
if (inherits(fit, "error")) {
message("Error en el ajuste del modelo GARCH. Verifique los datos y ajustes del modelo.")
} else {
# Genera un pronóstico para los próximos 10 periodos
forecast_data <- ugarchforecast(fit, n.ahead = 10)
# Extrae las fechas y el pronóstico
forecast_data_df <- data.frame(Fecha = index(forecast_data), Pronostico = forecast_data@forecast$seriesFor)
# Muestra el pronóstico
print(forecast_data_df)
# Exporta el pronóstico a un archivo Excel
write_xlsx(forecast_data_df, path = "pronostico.xlsx")
}
}
# Carga los datos desde el archivo CSV
vix_data <- read.csv("/Users/nagibsouki/Documents/^VIX-2.csv") %>%
mutate(Date = as.Date(Date, format = "%Y-%m-%d"))
# Elimina todos los valores NA
vix_data <- na.omit(vix_data)
# Verifica si hay valores faltantes después de la eliminación
if (any(is.na(vix_data$Close))) {
message("Aún hay valores faltantes en la columna 'Close'. Verifique sus datos.")
} else {
# Ajusta un modelo GARCH a los datos con ajustes adicionales
spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(1, 0)))
# Control de optimización para mejorar la convergencia
control <- list(maxit = 500, optim.method = "L-BFGS-B", solver.control = list(trace = FALSE))
# Ajusta el modelo y maneja las posibles advertencias
fit <- suppressWarnings(ugarchfit(spec, data = vix_data$Close, solver = "solnp", solver.control = control))
# Verifica si hubo algún error durante el ajuste
if (inherits(fit, "error")) {
message("Error en el ajuste del modelo GARCH. Verifique los datos y ajustes del modelo.")
} else {
# Genera un pronóstico para los próximos 10 periodos
forecast_data <- ugarchforecast(fit, n.ahead = 10)
# Extrae las fechas y el pronóstico
forecast_data_df <- data.frame(Fecha = index(forecast_data), Pronostico = forecast_data@forecast$seriesFor)
# Muestra el pronóstico
print(forecast_data_df)
# Exporta el pronóstico a un archivo Excel
write_xlsx(forecast_data_df, path = "pronostico.xlsx")
}
}
# Verifica si hay valores faltantes después de la eliminación
if (any(is.na(vix_data$Close))) {
message("Aún hay valores faltantes en la columna 'Close'. Verifique sus datos.")
} else {
# Ajusta un modelo GARCH a los datos con ajustes adicionales
spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(1, 0)))
# Control de optimización para mejorar la convergencia
control <- list(maxit = 500, optim.method = "L-BFGS-B", solver.control = list(trace = FALSE))
# Ajusta el modelo y maneja las posibles advertencias
fit <- suppressWarnings(ugarchfit(spec, data = vix_data$Close, solver = "solnp", solver.control = control))
# Verifica si hubo algún error durante el ajuste
if (inherits(fit, "error")) {
message("Error en el ajuste del modelo GARCH. Verifique los datos y ajustes del modelo.")
} else {
# Genera un pronóstico para los próximos 10 periodos
forecast_data <- ugarchforecast(fit, n.ahead = 10)
# Extrae las fechas y el pronóstico
forecast_data_df <- data.frame(Fecha = index(forecast_data), Pronostico = forecast_data@forecast$seriesFor)
# Muestra el pronóstico
print(forecast_data_df)
# Exporta el pronóstico a un archivo Excel
write_xlsx(forecast_data_df, path = "pronostico.xlsx")
}
}
f (any(is.na(vix_data$Close)))
if (any(is.na(vix_data$Close)))
if (any(is.na(vix_data$Close))) {
message("Aún hay valores faltantes en la columna 'Close'. Verifique sus datos.")
} else {
# Ajusta un modelo GARCH a los datos con ajustes adicionales
spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(1, 0)))
# Control de optimización para mejorar la convergencia
control <- list(maxit = 500, optim.method = "L-BFGS-B", solver.control = list(trace = FALSE))
# Ajusta el modelo y maneja las posibles advertencias
fit <- suppressWarnings(ugarchfit(spec, data = vix_data$Close, solver = "solnp", solver.control = control))
# Verifica si hubo algún error durante el ajuste
if (inherits(fit, "error")) {
message("Error en el ajuste del modelo GARCH. Verifique los datos y ajustes del modelo.")
} else {
# Genera un pronóstico para los próximos 10 periodos
forecast_data <- ugarchforecast(fit, n.ahead = 10)
# Extrae las fechas y el pronóstico
forecast_data_df <- data.frame(Fecha = index(forecast_data), Pronostico = forecast_data@forecast$seriesFor)
# Muestra el pronóstico
print(forecast_data_df)
# Exporta el pronóstico a un archivo Excel
write_xlsx(forecast_data_df, path = "pronostico.xlsx")
}
if (inherits(fit, "error")) {
message("Error en el ajuste del modelo GARCH. Verifique los datos y ajustes del modelo.")
} else {
# Genera un pronóstico para los próximos 10 periodos
forecast_data <- ugarchforecast(fit, n.ahead = 10)
if (inherits(fit, "error")) {
message("Error en el ajuste del modelo GARCH. Verifique los datos y ajustes del modelo.")
}
if (inherits(fit, "error")) {
message("Error en el ajuste del modelo GARCH. Verifique los datos y ajustes del modelo.")
# Control de optimización para mejorar la convergencia
control <- list(maxit = 500, optim.method = "L-BFGS-B", solver.control = list(trace = FALSE))
# Instala y carga las bibliotecas necesarias
install.packages(c("tidyverse", "rugarch", "writexl"))
library(tidyverse)
library(rugarch)
library(writexl)
# Carga los datos desde el archivo CSV
vix_data <- read.csv("/Users/nagibsouki/Documents/^VIX-2.csv") %>%
mutate(Date = as.Date(Date, format = "%Y-%m-%d"))
library(tidyverse)
library(rugarch)
library(writexl)
# Carga los datos desde el archivo CSV
vix_data <- read.csv("/Users/nagibsouki/Documents/^VIX-2.csv") %>%
mutate(Date = as.Date(Date, format = "%Y-%m-%d"))
library(tidyverse)
library(rugarch)
library(writexl)
# Carga los datos desde el archivo CSV
vix_data <- read.csv("/Users/nagibsouki/Documents/^VIX-2.csv") %>%
mutate(Date = as.Date(Date, format = "%Y-%m-%d"))
# Instala y carga las bibliotecas necesarias
install.packages(c("tidyverse", "rugarch", "writexl"))
library(tidyverse)
library(rugarch)
library(writexl)
# Carga los datos desde el archivo CSV
vix_data <- read.csv("vix_data.csv") %>%
mutate(Date = as.Date(Date, format = "%Y-%m-%d"))
# Elimina todos los valores NA
vix_data <- na.omit(vix_data)
# Verifica si hay valores faltantes después de la eliminación
if (any(is.na(vix_data$Close))) {
message("Aún hay valores faltantes en la columna 'Close'. Verifique sus datos.")
} else {
# Ajusta un modelo GARCH a los datos con ajustes adicionales
spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(1, 0)))
# Control de optimización para mejorar la convergencia
control <- list(maxit = 500, optim.method = "L-BFGS-B", solver.control = list(trace = FALSE))
# Ajusta el modelo y maneja las posibles advertencias
fit <- suppressWarnings(ugarchfit(spec, data = vix_data$Close, solver = "solnp", solver.control = control))
# Verifica si hubo algún error durante el ajuste
if (inherits(fit, "error")) {
message("Error en el ajuste del modelo GARCH. Verifique los datos y ajustes del modelo.")
} else {
# Genera un pronóstico para los próximos 10 periodos
forecast_data <- ugarchforecast(fit, n.ahead = 10)
# Extrae las fechas y el pronóstico
forecast_data_df <- data.frame(Fecha = index(forecast_data), Pronostico = forecast_data@forecast$seriesFor)
# Muestra el pronóstico
print(forecast_data_df)
# Exporta el pronóstico a un archivo Excel
write_xlsx(forecast_data_df, path = "pronostico.xlsx")
}
}
# Instala y carga las bibliotecas necesarias
install.packages(c("tidyverse", "rugarch", "writexl"))
# Instala y carga las bibliotecas necesarias
install.packages(c("tidyverse", "rugarch", "writexl"))
# Instala y carga las bibliotecas necesarias
install.packages(c("tidyverse", "rugarch", "writexl"))
library(tidyverse)
library(rugarch)
library(writexl)
# Carga los datos desde el archivo CSV
vix_data <- read.csv("vix_data.csv") %>%
mutate(Date = as.Date(Date, format = "%Y-%m-%d"))
# Elimina todos los valores NA
vix_data <- na.omit(vix_data)
# Verifica si hay valores faltantes después de la eliminación
if (any(is.na(vix_data$Close))) {
message("Aún hay valores faltantes en la columna 'Close'. Verifique sus datos.")
} else {
# Ajusta un modelo GARCH a los datos con ajustes adicionales
spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(1, 0)))
# Control de optimización para mejorar la convergencia
control <- list(maxit = 500, optim.method = "L-BFGS-B", solver.control = list(trace = FALSE))
# Ajusta el modelo y maneja las posibles advertencias
fit <- suppressWarnings(ugarchfit(spec, data = vix_data$Close, solver = "solnp", solver.control = control))
# Verifica si hubo algún error durante el ajuste
if (inherits(fit, "error")) {
message("Error en el ajuste del modelo GARCH. Verifique los datos y ajustes del modelo.")
} else {
# Genera un pronóstico para los próximos 10 periodos
forecast_data <- ugarchforecast(fit, n.ahead = 10)
# Extrae las fechas y el pronóstico
forecast_data_df <- data.frame(Fecha = index(forecast_data), Pronostico = forecast_data@forecast$seriesFor)
# Muestra el pronóstico
print(forecast_data_df)
# Exporta el pronóstico a un archivo Excel
write_xlsx(forecast_data_df, path = "pronostico.xlsx")
}
}
library(tidyverse)
library(rugarch)
library(writexl)
ssmi <- read.csv("SSMI.csv",
header = T,
sep = ",",
dec = ".",
na.strings="null")
ssmi <- read.csv("SSMI.csv",
header = T,
sep = ",",
dec = ".",
na.strings="null")
head(ssmi)
dim(ssmi)
tail(ssmi)
ssmi<-ssmi[complete.cases(ssmi),]
dim(ssmi)
class(ssmi)
Date_ssmi <- strptime(ssmi[,1], "%Y-%m-%d",tz="GMT")
ssmi_ts <- as.xts(ssmi[,2:ncol(ssmi)], Date_ssmi)
head(ssmi_ts)
class(ssmi)
class(ssmi_ts)
dim(ssmi_ts)
range(time(ssmi_ts))
plot(ssmi_ts$Adj.Close, main="SSMI", col="black")
r_t <- makeReturns(ssmi_ts$Adj.Close)
N <- length(r_t)
dim(r_t)
